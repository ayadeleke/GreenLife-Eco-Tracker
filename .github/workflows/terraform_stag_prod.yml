name: 'Terraform CI/CD'

on:
  push:
    branches:
      - develop
      - main

permissions:
  id-token: write
  contents: write

jobs:
  # Validation and Testing Jobs
  backend-lint:
    name: Backend Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install backend dependencies
        working-directory: ./greenlife_backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8
      - name: Run flake8
        working-directory: ./greenlife_backend
        run: flake8 tracker config

  backend-format:
    name: Backend Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install backend dependencies
        working-directory: ./greenlife_backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black
      - name: Run black
        working-directory: ./greenlife_backend
        run: black tracker config

  backend-security:
    name: Backend Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install security tools
        working-directory: ./greenlife_backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety pip-audit
      - name: Bandit security scan
        working-directory: ./greenlife_backend
        run: bandit -r tracker config
      - name: Safety vulnerability check
        working-directory: ./greenlife_backend
        run: safety scan --full-report
        continue-on-error: true
      - name: Pip-audit vulnerability check
        working-directory: ./greenlife_backend
        run: pip-audit
        continue-on-error: true

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: greenlife_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=3
    env:
      DB_NAME: greenlife_db
      DB_USER: root
      DB_PASSWORD: root
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install backend dependencies
        working-directory: ./greenlife_backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Wait for MySQL
        run: |
          sudo apt-get install -y mysql-client
          until mysqladmin ping -h"127.0.0.1" --silent; do
            sleep 1
          done
          sleep 5
      - name: Create staticfiles directory
        run: mkdir -p ./greenlife_backend/staticfiles
      - name: Migrate test database
        working-directory: ./greenlife_backend
        run: python manage.py migrate
      - name: Run Django tests
        working-directory: ./greenlife_backend
        run: python manage.py test

  frontend-lint:
    name: Frontend Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install frontend dependencies
        working-directory: ./greenlife-frontend
        run: npm ci
      - name: Run ESLint
        working-directory: ./greenlife-frontend
        run: npx eslint src --max-warnings=0

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install frontend dependencies
        working-directory: ./greenlife-frontend
        run: npm ci
      - name: Run frontend tests
        working-directory: ./greenlife-frontend
        run: npm test

  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    needs:
      - backend-lint
      - backend-format
      - backend-security
      - backend-tests
      - frontend-lint
      - frontend-tests
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      - name: Terraform Init
        working-directory: ./terraform/terraform-web
        run: terraform init
      - name: Terraform Format Check
        working-directory: ./terraform/terraform-web
        run: terraform fmt -check
      - name: Terraform Validate
        working-directory: ./terraform/terraform-web
        run: terraform validate
      - name: Terraform Security Scan (tfsec)
        run: |
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
          tfsec ./terraform/terraform-web --soft-fail

  # Staging Environment Jobs
  staging-terraform:
    name: 'Staging Terraform'
    runs-on: ubuntu-latest
    environment: staging
    if: github.ref == 'refs/heads/develop'
    needs: terraform-validate
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate Version Tag
        id: version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 --match="v*" 2>/dev/null || echo "v0.0.0")
          VERSION="${LATEST_TAG}-staging.${GITHUB_RUN_NUMBER}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

      - name: Terraform Init
        working-directory: ./terraform/terraform-staging
        run: terraform init

      - name: Terraform Format Check
        working-directory: ./terraform/terraform-staging
        run: terraform fmt -check

      - name: Terraform Plan
        working-directory: ./terraform/terraform-staging
        env:
          TF_VAR_django_secret_key: ${{ secrets.DJANGO_SECRET_KEY }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_backend_image_tag: ${{ steps.version.outputs.version }}
          TF_VAR_frontend_image_tag: ${{ steps.version.outputs.version }}
        run: terraform plan -input=false

      - name: Request Approval
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'ðŸš€ **Staging Deployment Approval Required**\n\nReview the Terraform plan and approve the deployment.'
            })

      - name: Wait for Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.MANUAL_APPROVAL_TOKEN }}
          approvers: ayadeleke
          minimum-approvals: 1

  staging-build-backend:
    name: 'Staging Build Backend'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    needs: staging-terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER_STAGING }}
          username: ${{ secrets.ACR_USERNAME_STAGING }}
          password: ${{ secrets.ACR_PASSWORD_STAGING }}

      - name: Build Backend Image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER_STAGING }}/greenlife-backend:${{ needs.staging-terraform.outputs.version }} \
                       -t ${{ secrets.ACR_LOGIN_SERVER_STAGING }}/greenlife-backend:latest ./greenlife_backend

  staging-build-frontend:
    name: 'Staging Build Frontend'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    needs: staging-terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER_STAGING }}
          username: ${{ secrets.ACR_USERNAME_STAGING }}
          password: ${{ secrets.ACR_PASSWORD_STAGING }}

      - name: Build Frontend Image
        run: |
          docker build --build-arg VITE_API_URL=https://greenlife-api.greenplant-30488afa.southcentralus.azurecontainerapps.io/api \
            -t ${{ secrets.ACR_LOGIN_SERVER_STAGING }}/greenlife-frontend:${{ needs.staging-terraform.outputs.version }} \
            -t ${{ secrets.ACR_LOGIN_SERVER_STAGING }}/greenlife-frontend:staging-latest ./greenlife-frontend

  staging-scan-backend:
    name: 'Staging Scan Backend'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    needs: staging-build-backend
    steps:
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Scan Backend Image
        run: |
          trivy image --exit-code 1 --severity CRITICAL ${{ secrets.ACR_LOGIN_SERVER_STAGING }}/greenlife-backend:${{ needs.staging-terraform.outputs.version }}
        continue-on-error: true

  staging-scan-frontend:
    name: 'Staging Scan Frontend'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    needs: staging-build-frontend
    steps:
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Scan Frontend Image
        run: |
          trivy image --exit-code 1 --severity CRITICAL ${{ secrets.ACR_LOGIN_SERVER_STAGING }}/greenlife-frontend:${{ needs.staging-terraform.outputs.version }}
        continue-on-error: true

  staging-push-images:
    name: 'Staging Push Images'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    needs:
      - staging-scan-backend
      - staging-scan-frontend
    steps:
      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER_STAGING }}
          username: ${{ secrets.ACR_USERNAME_STAGING }}
          password: ${{ secrets.ACR_PASSWORD_STAGING }}

      - name: Push Backend Image
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER_STAGING }}/greenlife-backend:${{ needs.staging-terraform.outputs.version }}
          docker push ${{ secrets.ACR_LOGIN_SERVER_STAGING }}/greenlife-backend:latest

      - name: Push Frontend Image
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER_STAGING }}/greenlife-frontend:${{ needs.staging-terraform.outputs.version }}
          docker push ${{ secrets.ACR_LOGIN_SERVER_STAGING }}/greenlife-frontend:staging-latest

  staging-terraform-apply:
    name: 'Staging Terraform Apply'
    runs-on: ubuntu-latest
    environment: staging
    if: github.ref == 'refs/heads/develop'
    needs:
      - staging-push-images
      - staging-terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

      - name: Terraform Apply
        working-directory: ./terraform/terraform-staging
        env:
          TF_VAR_django_secret_key: ${{ secrets.DJANGO_SECRET_KEY }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_backend_image_tag: ${{ needs.staging-terraform.outputs.version }}
          TF_VAR_frontend_image_tag: ${{ needs.staging-terraform.outputs.version }}
        run: terraform apply -auto-approve -input=false

  staging-deploy:
    name: 'Staging Deploy'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    needs: staging-terraform-apply
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Update Container Apps
        run: |
          # Update backend container app
          az containerapp update \
            --name ${{ secrets.CONTAINERAPP_BACKEND_NAME_STAGING }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_STAGING }} \
            --image ${{ secrets.ACR_LOGIN_SERVER_STAGING }}/greenlife-backend:${{ needs.staging-terraform.outputs.version }} \
            --set-env-vars ALLOWED_HOSTS="${{ secrets.ALLOWED_HOSTS_STAGING }}" \
            DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" \
            DEBUG="False"
          
          # Update frontend container app
          az containerapp update \
            --name ${{ secrets.CONTAINERAPP_FRONTEND_NAME_STAGING }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_FRONTEND_STAGING }} \
            --image ${{ secrets.ACR_LOGIN_SERVER_STAGING }}/greenlife-frontend:${{ needs.staging-terraform.outputs.version }} \
            --set-env-vars VITE_API_URL="${{ secrets.VITE_API_URL_STAGING }}"

      - name: Create Git Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "${{ needs.staging-terraform.outputs.version }}" -m "Staging deployment"
          git push origin "${{ needs.staging-terraform.outputs.version }}"

  # Production Environment Jobs
  production-terraform:
    name: 'Production Terraform'
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    needs: terraform-validate
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Latest Release Version
        id: version
        run: |
          LATEST_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" | \
            jq -r '.tag_name // empty')
          if [ -z "$LATEST_RELEASE" ]; then
            LATEST_RELEASE=$(git describe --tags --abbrev=0 --match="v*" 2>/dev/null || echo "v1.0.0")
          fi
          echo "version=$LATEST_RELEASE" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

      - name: Terraform Init
        working-directory: ./terraform/terraform-production
        run: terraform init

      - name: Terraform Format Check
        working-directory: ./terraform/terraform-production
        run: terraform fmt -check

      - name: Terraform Plan
        working-directory: ./terraform/terraform-production
        env:
          TF_VAR_django_secret_key: ${{ secrets.DJANGO_SECRET_KEY }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_backend_image_tag: ${{ steps.version.outputs.version }}
          TF_VAR_frontend_image_tag: ${{ steps.version.outputs.version }}
        run: terraform plan -input=false

      - name: Request Approval
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'ðŸš¨ **PRODUCTION Deployment Approval Required**\n\nReview the Terraform plan and approve the deployment.'
            })

      - name: Wait for Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.MANUAL_APPROVAL_TOKEN }}
          approvers: ayadeleke
          minimum-approvals: 1

  production-build-backend:
    name: 'Production Build Backend'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: production-terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}
          username: ${{ secrets.ACR_USERNAME_PRODUCTION }}
          password: ${{ secrets.ACR_PASSWORD_PRODUCTION }}

      - name: Build Backend Image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}/greenlife-backend:${{ needs.production-terraform.outputs.version }} \
                       -t ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}/greenlife-backend:latest ./greenlife_backend

  production-build-frontend:
    name: 'Production Build Frontend'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: production-terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}
          username: ${{ secrets.ACR_USERNAME_PRODUCTION }}
          password: ${{ secrets.ACR_PASSWORD_PRODUCTION }}

      - name: Build Frontend Image
        run: |
          docker build --build-arg VITE_API_URL=https://greenlife-api-prod.greenplant-30488afa.southcentralus.azurecontainerapps.io/api \
            -t ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}/greenlife-frontend:${{ needs.production-terraform.outputs.version }} \
            -t ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}/greenlife-frontend:latest ./greenlife-frontend

  production-scan-backend:
    name: 'Production Scan Backend'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: production-build-backend
    steps:
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Scan Backend Image
        run: |
          trivy image --exit-code 1 --severity CRITICAL ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}/greenlife-backend:${{ needs.production-terraform.outputs.version }}
        continue-on-error: true

  production-scan-frontend:
    name: 'Production Scan Frontend'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: production-build-frontend
    steps:
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Scan Frontend Image
        run: |
          trivy image --exit-code 1 --severity CRITICAL ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}/greenlife-frontend:${{ needs.production-terraform.outputs.version }}
        continue-on-error: true

  production-push-images:
    name: 'Production Push Images'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs:
      - production-scan-backend
      - production-scan-frontend
    steps:
      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}
          username: ${{ secrets.ACR_USERNAME_PRODUCTION }}
          password: ${{ secrets.ACR_PASSWORD_PRODUCTION }}

      - name: Push Backend Image
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}/greenlife-backend:${{ needs.production-terraform.outputs.version }}
          docker push ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}/greenlife-backend:latest

      - name: Push Frontend Image
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}/greenlife-frontend:${{ needs.production-terraform.outputs.version }}
          docker push ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}/greenlife-frontend:latest

  production-terraform-apply:
    name: 'Production Terraform Apply'
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    needs:
      - production-push-images
      - production-terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

      - name: Terraform Apply
        working-directory: ./terraform/terraform-production
        env:
          TF_VAR_django_secret_key: ${{ secrets.DJANGO_SECRET_KEY }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_backend_image_tag: ${{ needs.production-terraform.outputs.version }}
          TF_VAR_frontend_image_tag: ${{ needs.production-terraform.outputs.version }}
        run: terraform apply -auto-approve -input=false

  production-deploy:
    name: 'Production Deploy'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: production-terraform-apply
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Update Container Apps
        run: |
          # Update backend container app
          az containerapp update \
            --name ${{ secrets.CONTAINERAPP_BACKEND_NAME_PRODUCTION }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PRODUCTION }} \
            --image ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}/greenlife-backend:${{ needs.production-terraform.outputs.version }} \
            --set-env-vars ALLOWED_HOSTS="${{ secrets.ALLOWED_HOSTS_PRODUCTION }}" \
            DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" \
            DEBUG="False"
          
          # Update frontend container app
          az containerapp update \
            --name ${{ secrets.CONTAINERAPP_FRONTEND_NAME_PRODUCTION }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_FRONTEND_PRODUCTION }} \
            --image ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}/greenlife-frontend:${{ needs.production-terraform.outputs.version }} \
            --set-env-vars VITE_API_URL="${{ secrets.VITE_API_URL_PRODUCTION }}"

      - name: Add Deployment Metadata
        run: |
          DEPLOY_TIME=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
          echo "Deployed version ${{ needs.production-terraform.outputs.version }} at $DEPLOY_TIME"
