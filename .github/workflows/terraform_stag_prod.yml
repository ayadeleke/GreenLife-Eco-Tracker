# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - main
      - develop

permissions:
  contents: read

jobs:
  backend-lint:
    name: Backend Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install backend dependencies
        working-directory: ./greenlife_backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8
      - name: Run flake8
        working-directory: ./greenlife_backend
        run: flake8 tracker config

  backend-format:
    name: Backend Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install backend dependencies
        working-directory: ./greenlife_backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black
      - name: Run black
        working-directory: ./greenlife_backend
        run: black tracker config

  backend-security:
    name: Backend Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install security tools
        working-directory: ./greenlife_backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety pip-audit
      - name: Bandit security scan
        working-directory: ./greenlife_backend
        run: bandit -r tracker config
      - name: Safety vulnerability check
        working-directory: ./greenlife_backend
        run: safety scan --full-report
        continue-on-error: true
      - name: Pip-audit vulnerability check
        working-directory: ./greenlife_backend
        run: pip-audit
        continue-on-error: true

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: greenlife_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=3
    env:
      DB_NAME: greenlife_db
      DB_USER: root
      DB_PASSWORD: root
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install backend dependencies
        working-directory: ./greenlife_backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Wait for MySQL
        run: |
          sudo apt-get install -y mysql-client
          until mysqladmin ping -h"127.0.0.1" --silent; do
            sleep 1
          done
          sleep 5
      - name: Create staticfiles directory
        run: mkdir -p ./greenlife_backend/staticfiles
      - name: Migrate test database
        working-directory: ./greenlife_backend
        run: python manage.py migrate
      - name: Run Django tests
        working-directory: ./greenlife_backend
        run: python manage.py test

  frontend-lint:
    name: Frontend Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install frontend dependencies
        working-directory: ./greenlife-frontend
        run: npm ci
      - name: Run ESLint
        working-directory: ./greenlife-frontend
        run: npx eslint src --max-warnings=0

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install frontend dependencies
        working-directory: ./greenlife-frontend
        run: npm ci
      - name: Run frontend tests
        working-directory: ./greenlife-frontend
        run: npm test

  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check
      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate
      - name: Terraform Security Scan (tfsec)
        run: |
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
          tfsec ./terraform --soft-fail

  staging:
    name: 'Staging Deploy'
    runs-on: ubuntu-latest
    environment: staging
    if: github.ref == 'refs/heads/develop'
    needs:
      - backend-lint
      - backend-format
      - backend-security
      - backend-tests
      - frontend-lint
      - frontend-tests
      - terraform-validate
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

      - name: Terraform Init
        working-directory: ./terraform/terraform-staging
        run: terraform init

      - name: Terraform Format
        working-directory: ./terraform/terraform-staging
        run: terraform fmt -check

      - name: Terraform Plan
        working-directory: ./terraform/terraform-staging
        run: terraform plan -input=false

      - name: Terraform Apply
        working-directory: ./terraform/terraform-staging
        run: terraform apply -auto-approve -input=false

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER_STAGING }}
          username: ${{ secrets.ACR_USERNAME_STAGING }}
          password: ${{ secrets.ACR_PASSWORD_STAGING }}


      - name: Build Backend Image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER_STAGING }}/greenlife-backend:staging ./greenlife_backend

      - name: Scan Backend Docker Image with Trivy
        run: |
          pip install trivy
          trivy image --exit-code 1 --severity CRITICAL,HIGH ${{ secrets.ACR_LOGIN_SERVER_STAGING }}/greenlife-backend:staging

      - name: Push Backend Image
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER_STAGING }}/greenlife-backend:staging

      - name: Build Frontend Image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER_STAGING }}/greenlife-frontend:staging ./greenlife-frontend

      - name: Scan Frontend Docker Image with Trivy
        run: |
          trivy image --exit-code 1 --severity CRITICAL,HIGH ${{ secrets.ACR_LOGIN_SERVER_STAGING }}/greenlife-frontend:staging

      - name: Push Frontend Image
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER_STAGING }}/greenlife-frontend:staging

      - name: Deploy to Azure Container Apps (Staging)
        run: |
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az containerapp update --name ${{ secrets.CONTAINERAPP_BACKEND_NAME_STAGING }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_STAGING }} --image ${{ secrets.ACR_LOGIN_SERVER_STAGING }}/greenlife-backend:staging
          az containerapp update --name ${{ secrets.CONTAINERAPP_FRONTEND_NAME_STAGING }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_FRONTEND_STAGING }} --image ${{ secrets.ACR_LOGIN_SERVER_STAGING }}/greenlife-frontend:staging
          az containerapp restart --name ${{ secrets.CONTAINERAPP_BACKEND_NAME_STAGING }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_STAGING }}
          az containerapp restart --name ${{ secrets.CONTAINERAPP_FRONTEND_NAME_STAGING }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_FRONTEND_STAGING }}

  production:
    name: 'Production Deploy'
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    needs:
      - backend-lint
      - backend-format
      - backend-security
      - backend-tests
      - frontend-lint
      - frontend-tests
      - terraform-validate
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

      - name: Terraform Init
        working-directory: ./terraform/terraform-production
        run: terraform init

      - name: Terraform Format
        working-directory: ./terraform/terraform-production
        run: terraform fmt -check

      - name: Terraform Plan
        working-directory: ./terraform/terraform-production
        run: terraform plan -input=false

      - name: Terraform Apply
        working-directory: ./terraform/terraform-production
        run: terraform apply -auto-approve -input=false

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}
          username: ${{ secrets.ACR_USERNAME_PRODUCTION }}
          password: ${{ secrets.ACR_PASSWORD_PRODUCTION }}


      - name: Build Backend Image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}/greenlife-backend:prod ./greenlife_backend

      - name: Scan Backend Docker Image with Trivy
        run: |
          pip install trivy
          trivy image --exit-code 1 --severity CRITICAL,HIGH ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}/greenlife-backend:prod

      - name: Push Backend Image
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}/greenlife-backend:prod

      - name: Build Frontend Image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}/greenlife-frontend:prod ./greenlife-frontend

      - name: Scan Frontend Docker Image with Trivy
        run: |
          trivy image --exit-code 1 --severity CRITICAL,HIGH ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}/greenlife-frontend:prod

      - name: Push Frontend Image
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}/greenlife-frontend:prod

      - name: Deploy to Azure Container Apps (Production)
        run: |
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az containerapp update --name ${{ secrets.CONTAINERAPP_BACKEND_NAME_PRODUCTION }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PRODUCTION }} --image ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}/greenlife-backend:prod
          az containerapp update --name ${{ secrets.CONTAINERAPP_FRONTEND_NAME_PRODUCTION }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_FRONTEND_PRODUCTION }} --image ${{ secrets.ACR_LOGIN_SERVER_PRODUCTION }}/greenlife-frontend:prod
          az containerapp restart --name ${{ secrets.CONTAINERAPP_BACKEND_NAME_PRODUCTION }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PRODUCTION }}
          az containerapp restart --name ${{ secrets.CONTAINERAPP_FRONTEND_NAME_PRODUCTION }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_FRONTEND_PRODUCTION }}
